// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sonic/sonic/model/entity"
)

func newPermanent(db *gorm.DB, opts ...gen.DOOption) permanent {
	_permanent := permanent{}

	_permanent.permanentDo.UseDB(db, opts...)
	_permanent.permanentDo.UseModel(&entity.Permanent{})

	tableName := _permanent.permanentDo.TableName()
	_permanent.ALL = field.NewAsterisk(tableName)
	_permanent.Key = field.NewString(tableName, "key")
	_permanent.Lang = field.NewString(tableName, "lang")
	_permanent.Content = field.NewString(tableName, "content")
	_permanent.Password = field.NewString(tableName, "password")
	_permanent.ClientIP = field.NewString(tableName, "client_ip")
	_permanent.Username = field.NewString(tableName, "username")
	_permanent.CreatedAt = field.NewTime(tableName, "created_at")
	_permanent.DeletedAt = field.NewField(tableName, "deleted_at")

	_permanent.fillFieldMap()

	return _permanent
}

type permanent struct {
	permanentDo permanentDo

	ALL       field.Asterisk
	Key       field.String
	Lang      field.String
	Content   field.String
	Password  field.String
	ClientIP  field.String
	Username  field.String
	CreatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (p permanent) Table(newTableName string) *permanent {
	p.permanentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p permanent) As(alias string) *permanent {
	p.permanentDo.DO = *(p.permanentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *permanent) updateTableName(table string) *permanent {
	p.ALL = field.NewAsterisk(table)
	p.Key = field.NewString(table, "key")
	p.Lang = field.NewString(table, "lang")
	p.Content = field.NewString(table, "content")
	p.Password = field.NewString(table, "password")
	p.ClientIP = field.NewString(table, "client_ip")
	p.Username = field.NewString(table, "username")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *permanent) WithContext(ctx context.Context) *permanentDo {
	return p.permanentDo.WithContext(ctx)
}

func (p permanent) TableName() string { return p.permanentDo.TableName() }

func (p permanent) Alias() string { return p.permanentDo.Alias() }

func (p permanent) Columns(cols ...field.Expr) gen.Columns { return p.permanentDo.Columns(cols...) }

func (p *permanent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *permanent) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["key"] = p.Key
	p.fieldMap["lang"] = p.Lang
	p.fieldMap["content"] = p.Content
	p.fieldMap["password"] = p.Password
	p.fieldMap["client_ip"] = p.ClientIP
	p.fieldMap["username"] = p.Username
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p permanent) clone(db *gorm.DB) permanent {
	p.permanentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p permanent) replaceDB(db *gorm.DB) permanent {
	p.permanentDo.ReplaceDB(db)
	return p
}

type permanentDo struct{ gen.DO }

func (p permanentDo) Debug() *permanentDo {
	return p.withDO(p.DO.Debug())
}

func (p permanentDo) WithContext(ctx context.Context) *permanentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p permanentDo) ReadDB() *permanentDo {
	return p.Clauses(dbresolver.Read)
}

func (p permanentDo) WriteDB() *permanentDo {
	return p.Clauses(dbresolver.Write)
}

func (p permanentDo) Session(config *gorm.Session) *permanentDo {
	return p.withDO(p.DO.Session(config))
}

func (p permanentDo) Clauses(conds ...clause.Expression) *permanentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p permanentDo) Returning(value interface{}, columns ...string) *permanentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p permanentDo) Not(conds ...gen.Condition) *permanentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p permanentDo) Or(conds ...gen.Condition) *permanentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p permanentDo) Select(conds ...field.Expr) *permanentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p permanentDo) Where(conds ...gen.Condition) *permanentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p permanentDo) Order(conds ...field.Expr) *permanentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p permanentDo) Distinct(cols ...field.Expr) *permanentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p permanentDo) Omit(cols ...field.Expr) *permanentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p permanentDo) Join(table schema.Tabler, on ...field.Expr) *permanentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p permanentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *permanentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p permanentDo) RightJoin(table schema.Tabler, on ...field.Expr) *permanentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p permanentDo) Group(cols ...field.Expr) *permanentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p permanentDo) Having(conds ...gen.Condition) *permanentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p permanentDo) Limit(limit int) *permanentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p permanentDo) Offset(offset int) *permanentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p permanentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *permanentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p permanentDo) Unscoped() *permanentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p permanentDo) Create(values ...*entity.Permanent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p permanentDo) CreateInBatches(values []*entity.Permanent, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p permanentDo) Save(values ...*entity.Permanent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p permanentDo) First() (*entity.Permanent, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Permanent), nil
	}
}

func (p permanentDo) Take() (*entity.Permanent, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Permanent), nil
	}
}

func (p permanentDo) Last() (*entity.Permanent, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Permanent), nil
	}
}

func (p permanentDo) Find() ([]*entity.Permanent, error) {
	result, err := p.DO.Find()
	return result.([]*entity.Permanent), err
}

func (p permanentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Permanent, err error) {
	buf := make([]*entity.Permanent, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p permanentDo) FindInBatches(result *[]*entity.Permanent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p permanentDo) Attrs(attrs ...field.AssignExpr) *permanentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p permanentDo) Assign(attrs ...field.AssignExpr) *permanentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p permanentDo) Joins(fields ...field.RelationField) *permanentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p permanentDo) Preload(fields ...field.RelationField) *permanentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p permanentDo) FirstOrInit() (*entity.Permanent, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Permanent), nil
	}
}

func (p permanentDo) FirstOrCreate() (*entity.Permanent, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Permanent), nil
	}
}

func (p permanentDo) FindByPage(offset int, limit int) (result []*entity.Permanent, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p permanentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p permanentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p permanentDo) Delete(models ...*entity.Permanent) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *permanentDo) withDO(do gen.Dao) *permanentDo {
	p.DO = *do.(*gen.DO)
	return p
}
